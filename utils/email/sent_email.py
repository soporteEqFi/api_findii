import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
import time as std_time
import uuid
from datetime import datetime

from dotenv import load_dotenv
load_dotenv(os.path.expanduser("~/api_findii/.env"))
# load_dotenv()

def config_email():
    smtp_server = "smtp.zoho.com"
    smtp_port = 465
    sender_email = "credito@findii.co"
    sender_password = os.getenv('EMAIL_PASSWORD')

    email_settings = {
        "smtp_server": smtp_server,
        "smtp_port": smtp_port,
        "sender_email": sender_email,
        "sender_password": sender_password
    }

    return email_settings

def test_email_connection():
    """
    Funci√≥n para probar la conexi√≥n SMTP con Zoho
    """
    try:
        email_settings = config_email()

        if not email_settings["sender_password"]:
            print("‚ùå No se encontr√≥ EMAIL_PASSWORD en las variables de entorno")
            return False

        print("üß™ Probando conexi√≥n SMTP con Zoho...")
        print(f"   üìß Servidor: {email_settings['smtp_server']}")
        print(f"   üîå Puerto: {email_settings['smtp_port']}")
        print(f"   üë§ Email: {email_settings['sender_email']}")
        print(f"   üîë Contrase√±a: {'*' * len(email_settings['sender_password'])}")

        # Probar conexi√≥n SSL
        server = smtplib.SMTP_SSL(email_settings["smtp_server"], email_settings["smtp_port"])
        server.set_debuglevel(1)  # Debug detallado

        print("   üîê Probando autenticaci√≥n...")
        server.login(email_settings["sender_email"], email_settings["sender_password"])

        server.quit()
        print("   ‚úÖ Conexi√≥n exitosa!")
        return True

    except smtplib.SMTPAuthenticationError as e:
        print(f"   ‚ùå Error de autenticaci√≥n: {str(e)}")
        print("   üí° Soluciones:")
        print("      1. Verifica que tengas 2FA habilitado en Zoho")
        print("      2. Genera una contrase√±a de aplicaci√≥n espec√≠fica")
        print("      3. Usa la contrase√±a de aplicaci√≥n, NO tu contrase√±a normal")
        return False

    except smtplib.SMTPConnectError as e:
        print(f"   ‚ùå Error de conexi√≥n: {str(e)}")
        print("   üí° Verifica tu conexi√≥n a internet")
        return False

    except Exception as e:
        print(f"   ‚ùå Error inesperado: {str(e)}")
        return False

def formatear_campos_dinamicos(campos_dict, titulo="", nivel_indentacion=1):
    """
    Formatea campos din√°micos de manera recursiva para mostrar en el email
    """
    if not campos_dict or not isinstance(campos_dict, dict):
        return ""

    resultado = []
    indentacion = "    " * nivel_indentacion

    if titulo:
        resultado.append(f"\n{indentacion}{titulo.upper()}")
        resultado.append(f"{indentacion}{'=' * len(titulo)}")

    for clave, valor in campos_dict.items():
        # Formatear clave para mostrar
        clave_formateada = clave.replace('_', ' ').title()

        if isinstance(valor, dict):
            # Si es un diccionario, formatear recursivamente
            resultado.append(f"{indentacion}‚Ä¢ {clave_formateada}:")
            sub_contenido = formatear_campos_dinamicos(valor, "", nivel_indentacion + 1)
            if sub_contenido:
                resultado.append(sub_contenido)
        elif isinstance(valor, list):
            # Si es una lista, mostrar cada elemento
            resultado.append(f"{indentacion}‚Ä¢ {clave_formateada}:")
            for i, item in enumerate(valor):
                if isinstance(item, dict):
                    resultado.append(f"{indentacion}    {i+1}:")
                    sub_contenido = formatear_campos_dinamicos(item, "", nivel_indentacion + 2)
                    if sub_contenido:
                        resultado.append(sub_contenido)
                else:
                    resultado.append(f"{indentacion}    ‚Ä¢ {item}")
        else:
            # Valor simple
            resultado.append(f"{indentacion}‚Ä¢ {clave_formateada}: {valor}")

    return "\n".join(resultado)

def mapear_datos_para_email(response_data, original_json=None):
    """
    Mapea los datos de la respuesta del controlador crear_registro_completo
    al formato esperado por las funciones de email (solicitante, asesor y banco)

    Args:
        response_data: Respuesta del controlador con los datos creados
        original_json: JSON original enviado desde el frontend (para extraer correos)
    """
    try:
        data = response_data.get("data", {})

        # Extraer datos del solicitante
        solicitante = data.get("solicitante", {})
        solicitudes = data.get("solicitudes", [])
        ubicaciones = data.get("ubicaciones", [])
        actividad_economica = data.get("actividad_economica", {})
        informacion_financiera = data.get("informacion_financiera", {})
        referencias = data.get("referencias", [])

        # Obtener primera solicitud si existe
        primera_solicitud = solicitudes[0] if solicitudes else {}
        primera_ubicacion = ubicaciones[0] if ubicaciones else {}

        # Generar ID de radicado √∫nico
        id_radicado = f"FD-{uuid.uuid4().hex[:8].upper()}"

        # Preparar datos b√°sicos del solicitante
        nombre_completo = f"{solicitante.get('nombres', '')} {solicitante.get('primer_apellido', '')} {solicitante.get('segundo_apellido', '')}"
        correo_electronico = solicitante.get("correo", "")

        # Extraer campos din√°micos
        info_extra = solicitante.get("info_extra", {})
        detalle_credito = primera_solicitud.get("detalle_credito", {})
        detalle_direccion = primera_ubicacion.get("detalle_direccion", {}) if primera_ubicacion else {}
        detalle_actividad = actividad_economica.get("detalle_actividad", {}) if actividad_economica else {}
        detalle_financiera = informacion_financiera.get("detalle_financiera", {}) if informacion_financiera else {}

        # EXTRACCI√ìN ROBUSTA DE CORREOS DESDE EL JSON ORIGINAL
        nombre_asesor = ""
        correo_asesor = ""
        nombre_banco_usuario = ""
        correo_banco_usuario = ""

        if original_json:
            print(f"üîç DEBUG - Extrayendo correos desde JSON original:")
            print(f"   üìã Claves en JSON original: {list(original_json.keys())}")

            # Extraer correo del solicitante (siempre en la ra√≠z)
            correo_solicitante_original = original_json.get("correo", "")
            if correo_solicitante_original:
                correo_electronico = correo_solicitante_original
                print(f"   ‚úÖ Correo solicitante encontrado en ra√≠z: {correo_electronico}")

            # EXTRACCI√ìN ROBUSTA: BUSCAR EN RA√çZ Y EN SOLICITUDES[0]
            # Obtener primera solicitud del JSON original si existe
            solicitud_original = (original_json.get("solicitudes") or [{}])[0]

            # Buscar en ra√≠z primero, luego en solicitudes[0]
            correo_asesor = (original_json.get("correo_asesor") or solicitud_original.get("correo_asesor", "")).strip()
            nombre_asesor = (original_json.get("nombre_asesor") or solicitud_original.get("nombre_asesor", "")).strip()
            correo_banco_usuario = (original_json.get("correo_banco_usuario") or solicitud_original.get("correo_banco_usuario", "")).strip()
            nombre_banco_usuario = (original_json.get("nombre_banco_usuario") or solicitud_original.get("nombre_banco_usuario", "")).strip()

            print(f"   üë®‚Äçüíº Asesor extra√≠do: '{nombre_asesor}' ('{correo_asesor}')")
            print(f"   üè¶ Usuario banco extra√≠do: '{nombre_banco_usuario}' ('{correo_banco_usuario}')")

            # Debug adicional: mostrar d√≥nde se encontraron exactamente los datos
            print(f"   üîç DEBUG UBICACI√ìN DE DATOS:")

            # Verificar correo_asesor
            if original_json.get("correo_asesor"):
                print(f"   üìç ‚úÖ correo_asesor encontrado en RA√çZ: '{original_json.get('correo_asesor')}'")
            elif solicitud_original.get("correo_asesor"):
                print(f"   üìç ‚úÖ correo_asesor encontrado en SOLICITUDES[0]: '{solicitud_original.get('correo_asesor')}'")
            else:
                print(f"   üìç ‚ùå correo_asesor NO encontrado en ninguna ubicaci√≥n")

            # Verificar correo_banco_usuario
            if original_json.get("correo_banco_usuario"):
                print(f"   üìç ‚úÖ correo_banco_usuario encontrado en RA√çZ: '{original_json.get('correo_banco_usuario')}'")
            elif solicitud_original.get("correo_banco_usuario"):
                print(f"   üìç ‚úÖ correo_banco_usuario encontrado en SOLICITUDES[0]: '{solicitud_original.get('correo_banco_usuario')}'")
            else:
                print(f"   üìç ‚ùå correo_banco_usuario NO encontrado en ninguna ubicaci√≥n")

            # Mostrar estructura de solicitudes para debugging
            print(f"   üîç DEBUG ESTRUCTURA SOLICITUDES:")
            if original_json.get("solicitudes"):
                print(f"      - Cantidad de solicitudes: {len(original_json.get('solicitudes', []))}")
                if solicitud_original:
                    print(f"      - Claves en solicitudes[0]: {list(solicitud_original.keys())}")
                    # Mostrar solo los campos relevantes
                    campos_relevantes = ['nombre_asesor', 'correo_asesor', 'nombre_banco_usuario', 'correo_banco_usuario']
                    for campo in campos_relevantes:
                        valor = solicitud_original.get(campo, 'NO_ENCONTRADO')
                        print(f"      - {campo}: '{valor}'")
            else:
                print(f"      - No hay solicitudes en el JSON")
        else:
            # Fallback: usar datos del detalle_credito (m√©todo anterior)
            print(f"‚ö†Ô∏è WARNING - No se recibi√≥ JSON original, usando m√©todo fallback desde detalle_credito")
            nombre_asesor = detalle_credito.get("nombre_asesor", "").strip()
            correo_asesor = detalle_credito.get("correo_asesor", "").strip()
            nombre_banco_usuario = detalle_credito.get("nombre_banco_usuario", "").strip()
            correo_banco_usuario = detalle_credito.get("correo_banco_usuario", "").strip()
            print(f"   üë®‚Äçüíº Asesor (fallback): '{nombre_asesor}' ('{correo_asesor}')")
            print(f"   üè¶ Usuario banco (fallback): '{nombre_banco_usuario}' ('{correo_banco_usuario}')")
            print(f"   üìã Claves disponibles en detalle_credito: {list(detalle_credito.keys())}")

            # Tambi√©n intentar extraer desde la respuesta procesada
            if solicitudes and len(solicitudes) > 0:
                primera_solicitud_procesada = solicitudes[0]
                detalle_credito_procesado = primera_solicitud_procesada.get("detalle_credito", {})
                print(f"   üîç Intentando extraer desde solicitud procesada...")
                print(f"   üìã Claves en detalle_credito procesado: {list(detalle_credito_procesado.keys())}")

                # Usar datos procesados si no se encontraron en detalle_credito original
                if not correo_asesor:
                    correo_asesor = detalle_credito_procesado.get("correo_asesor", "").strip()
                    nombre_asesor = detalle_credito_procesado.get("nombre_asesor", "").strip()
                if not correo_banco_usuario:
                    correo_banco_usuario = detalle_credito_procesado.get("correo_banco_usuario", "").strip()
                    nombre_banco_usuario = detalle_credito_procesado.get("nombre_banco_usuario", "").strip()

                print(f"   üë®‚Äçüíº Asesor (procesado): '{nombre_asesor}' ('{correo_asesor}')")
                print(f"   üè¶ Usuario banco (procesado): '{nombre_banco_usuario}' ('{correo_banco_usuario}')")

        # Validar que los datos cr√≠ticos no est√©n vac√≠os
        print(f"\nüîç VALIDACI√ìN FINAL DE DATOS:")
        print(f"   üìß Correo solicitante: '{correo_electronico}' - {'‚úÖ V√°lido' if correo_electronico.strip() else '‚ùå Vac√≠o'}")
        print(f"   üë®‚Äçüíº Asesor: '{nombre_asesor}' / '{correo_asesor}' - {'‚úÖ V√°lido' if correo_asesor.strip() else '‚ùå Vac√≠o'}")
        print(f"   üè¶ Banco: '{nombre_banco_usuario}' / '{correo_banco_usuario}' - {'‚úÖ V√°lido' if correo_banco_usuario.strip() else '‚ùå Vac√≠o'}")

        # Resumen de d√≥nde se encontraron los datos
        if original_json:
            print(f"   üìç RESUMEN DE UBICACIONES:")
            if correo_asesor:
                ubicacion_asesor = "ra√≠z" if original_json.get("correo_asesor") else "solicitudes[0]"
                print(f"      - Datos asesor: encontrados en {ubicacion_asesor}")
            if correo_banco_usuario:
                ubicacion_banco = "ra√≠z" if original_json.get("correo_banco_usuario") else "solicitudes[0]"
                print(f"      - Datos banco: encontrados en {ubicacion_banco}")

        # Mapear datos al formato esperado por el email
        datos_mapeados = {
            "id_radicado": id_radicado,
            "solicitante": {
                "nombre_completo": nombre_completo,
                "correo_electronico": correo_electronico,
                "datos_basicos": {
                    "tipo_identificacion": solicitante.get("tipo_identificacion", "N/A"),
                    "numero_documento": solicitante.get("numero_documento", "N/A"),
                    "fecha_nacimiento": solicitante.get("fecha_nacimiento", "N/A"),
                    "genero": solicitante.get("genero", "N/A")
                },
                "info_extra": info_extra,
                "ubicacion": detalle_direccion,
                "actividad_economica": detalle_actividad,
                "informacion_financiera": detalle_financiera,
                "referencias": referencias
            },
            "solicitud": {
                "banco_nombre": primera_solicitud.get("banco_nombre", "N/A"),
                "ciudad_solicitud": primera_solicitud.get("ciudad_solicitud", "N/A"),
                "estado": primera_solicitud.get("estado", "Pendiente"),
                "detalle_credito": detalle_credito
            },
            "asesor": {
                "nombre": nombre_asesor,
                "correo": correo_asesor
            },
            "banco": {
                "nombre_usuario": nombre_banco_usuario,
                "correo_usuario": correo_banco_usuario
            }
        }

        print(f"\n‚úÖ DATOS MAPEADOS CORRECTAMENTE PARA ENVIO DE EMAILS:")
        print(f"   üÜî ID Radicado: {id_radicado}")
        print(f"   üë§ Solicitante: {nombre_completo} ({correo_electronico})")
        print(f"   üë®‚Äçüíº Asesor: {nombre_asesor} ({correo_asesor})")
        print(f"   üè¶ Banco: {nombre_banco_usuario} ({correo_banco_usuario})")
        print(f"   üìä Estado de emails: Solicitante={bool(correo_electronico.strip())}, Asesor={bool(correo_asesor.strip())}, Banco={bool(correo_banco_usuario.strip())}")

        return datos_mapeados

    except Exception as e:
        print(f"‚ùå ERROR CRITICO mapeando datos para email: {str(e)}")
        import traceback
        print(f"üìã Traceback completo: {traceback.format_exc()}")
        # Mostrar informaci√≥n de debugging adicional
        if 'original_json' in locals() and original_json:
            print(f"üîç JSON original keys: {list(original_json.keys())}")
            if 'solicitudes' in original_json:
                print(f"üîç Solicitudes disponibles: {len(original_json['solicitudes'])}")
        return None

def enviar_email_registro_completo(response_data, original_json=None):
    """
    Funci√≥n principal para enviar los tres emails despu√©s de crear/editar un registro completo:
    1. Email al solicitante
    2. Email al asesor
    3. Email al banco

    Args:
        response_data: Respuesta del controlador con los datos creados
        original_json: JSON original enviado desde el frontend (para extraer correos)
    """
    try:
        # Mapear datos al formato esperado
        datos_email = mapear_datos_para_email(response_data, original_json)
        if not datos_email:
            print("‚ùå No se pudieron mapear los datos para el email")
            return False

        # Configurar email
        email_settings = config_email()
        if not email_settings["sender_password"]:
            print("‚ùå No se encontr√≥ la contrase√±a del email en las variables de entorno")
            return False

        resultados = {
            "solicitante": False,
            "asesor": False,
            "banco": False
        }

        # 1. Enviar email al solicitante
        email_solicitante = datos_email['solicitante']['correo_electronico']
        if email_solicitante and email_solicitante.strip():
            print("üìß Enviando email al solicitante...")
            resultados["solicitante"] = enviar_email_solicitante(email_settings, datos_email)
        else:
            print("‚ö†Ô∏è WARNING: No se encontr√≥ email del solicitante o est√° vac√≠o")
            resultados["solicitante"] = False

        # 2. Enviar email al asesor
        email_asesor = datos_email['asesor']['correo']
        if email_asesor and email_asesor.strip():
            print("üìß Enviando email al asesor...")
            resultados["asesor"] = enviar_email_asesor(email_settings, datos_email)
        else:
            print("‚ö†Ô∏è WARNING: No se encontr√≥ email del asesor o est√° vac√≠o")
            resultados["asesor"] = False

        # 3. Enviar email al banco
        email_banco = datos_email['banco']['correo_usuario']
        if email_banco and email_banco.strip():
            print("üìß Enviando email al banco...")
            resultados["banco"] = enviar_email_banco(email_settings, datos_email)
        else:
            print("‚ö†Ô∏è WARNING: No se encontr√≥ email del banco o est√° vac√≠o")
            resultados["banco"] = False

        # Verificar si al menos uno se envi√≥ exitosamente
        exito_general = any(resultados.values())

        # Resumen mejorado con emojis
        print(f"\nüìä RESUMEN DE ENV√çOS DE CORREOS:")
        print(f"   üë§ Solicitante: {'‚úÖ Enviado' if resultados['solicitante'] else '‚ùå Fallido/Sin email'}")
        print(f"   üë®‚Äçüíº Asesor: {'‚úÖ Enviado' if resultados['asesor'] else '‚ùå Fallido/Sin email'}")
        print(f"   üè¶ Banco: {'‚úÖ Enviado' if resultados['banco'] else '‚ùå Fallido/Sin email'}")
        print(f"   üìä Total exitosos: {sum(resultados.values())}/3")

        return exito_general

    except Exception as e:
        print(f"‚ùå ERROR GENERAL enviando emails de registro completo: {str(e)}")
        print(f"üìä Resumen de env√≠os: Solicitante: ‚ùå, Asesor: ‚ùå, Banco: ‚ùå")
        return False

def format_second_holder_info(info):
    """Formatea la informaci√≥n del segundo titular para mostrarla de manera legible"""
    if not info or info == 'N/A' or info == '':
        return ""

    try:
        # Si es un JSON, formatearlo de manera legible
        if isinstance(info, dict):
            formatted_info = []
            for key, value in info.items():
                if value and value != 'N/A' and value != '':
                    # Convertir la clave a un formato m√°s legible
                    key_formatted = key.replace('_', ' ').title()
                    formatted_info.append(f"{key_formatted}: {value}")

            if formatted_info:
                return "\n        " + "\n        ".join([f"‚Ä¢ {item}" for item in formatted_info])
            else:
                return ""
        else:
            # Si es un string, mostrarlo tal como est√°
            return f"\n        ‚Ä¢ {info}"
    except:
        # Si hay alg√∫n error, mostrar la informaci√≥n tal como est√°
        return f"\n        ‚Ä¢ {info}"

def email_body_and_send(email_settings, data):
    try:
        print("Datos a usar para el correo")
        print(data)
        print()

        msg = MIMEMultipart()
        msg['From'] = email_settings["sender_email"]
        msg['To'] = data['solicitante']['correo_electronico']
        msg['Subject'] = "Confirmaci√≥n de registro de solicitud"

        # Formatear datos b√°sicos del solicitante
        datos_basicos_str = formatear_campos_dinamicos(data['solicitante']['datos_basicos'])

        # Formatear informaci√≥n extra del solicitante
        info_extra_str = formatear_campos_dinamicos(data['solicitante']['info_extra'], "Informaci√≥n Adicional")

        # Formatear detalles del cr√©dito
        detalle_credito_str = formatear_campos_dinamicos(data['solicitud']['detalle_credito'], "Detalles del Cr√©dito")

        # Cuerpo del mensaje
        body = f"""
        Estimado/a {data['solicitante']['nombre_completo']},

        ¬°Gracias por confiar en Findii! Su solicitud ha sido registrada exitosamente.

        Para hacer seguimiento a su solicitud, puede ingresar al siguiente enlace:
        https://findii.co/seguimiento/{data['id_radicado']}

        A continuaci√≥n encontrar√° el resumen de la informaci√≥n registrada:

        DATOS DEL SOLICITANTE
        ====================
        ‚Ä¢ Nombre: {data['solicitante']['nombre_completo']}
        ‚Ä¢ Email: {data['solicitante']['correo_electronico']}

        DATOS B√ÅSICOS
        =============
{datos_basicos_str}
{info_extra_str}

        INFORMACI√ìN DE LA SOLICITUD
        ==========================
        ‚Ä¢ Banco: {data['solicitud']['banco_nombre']}
        ‚Ä¢ Ciudad de solicitud: {data['solicitud']['ciudad_solicitud']}
        ‚Ä¢ Estado: {data['solicitud']['estado']}
{detalle_credito_str}

        Uno de nuestros asesores se pondr√° en contacto con usted muy pronto para dar seguimiento a su solicitud.

        Si tiene alguna duda, puede responder directamente a este correo.

        ¬°Gracias por elegirnos!

        Cordialmente,
        Equipo Findii
        """

        msg.attach(MIMEText(body, 'plain'))

        # Enviar el correo directamente
        resultado = send_email(email_settings, msg)
        return resultado

    except Exception as e:
        print(f"Error al preparar el correo: {str(e)}")
        return False

def send_email(email_settings, msg):
    """
    Env√≠a correo usando SSL para Zoho (puerto 465)
    """
    max_attempts = 3
    retry_delay = 2  # segundos entre intentos

    for attempt in range(max_attempts):
        try:
            print(f"üîß Configurando conexi√≥n SMTP para Zoho...")
            print(f"   üìß Servidor: {email_settings['smtp_server']}")
            print(f"   üîå Puerto: {email_settings['smtp_port']}")
            print(f"   üë§ Usuario: {email_settings['sender_email']}")

            # Para Zoho con puerto 465, usar SMTP_SSL directamente
            if email_settings["smtp_port"] == 465:
                print("   üîí Usando SSL directo (puerto 465)")
                server = smtplib.SMTP_SSL(email_settings["smtp_server"], email_settings["smtp_port"])
            else:
                print("   üîì Usando STARTTLS")
                server = smtplib.SMTP(email_settings["smtp_server"], email_settings["smtp_port"])
                server.starttls()

            # Configurar timeout y debug
            server.set_debuglevel(0)  # Cambiar a 1 para debug detallado

            print("   üîê Iniciando autenticaci√≥n...")
            server.login(email_settings["sender_email"], email_settings["sender_password"])
            print("   ‚úÖ Autenticaci√≥n exitosa")

            # Verifica que msg sea un objeto EmailMessage o MIMEMultipart
            if isinstance(msg, dict):
                # Si es un diccionario, construye un mensaje adecuado
                from email.mime.multipart import MIMEMultipart
                from email.mime.text import MIMEText

                email_msg = MIMEMultipart()
                email_msg['From'] = email_settings["sender_email"]
                email_msg['To'] = msg.get('to', '')
                email_msg['Subject'] = msg.get('subject', 'Sin asunto')

                # El cuerpo del mensaje
                body = msg.get('body', '')
                if isinstance(body, dict):
                    body = str(body)  # Convertir diccionario a string si es necesario

                email_msg.attach(MIMEText(body, 'html' if msg.get('html', False) else 'plain'))

                # Enviar el mensaje correctamente formateado
                print("   üì§ Enviando mensaje...")
                server.send_message(email_msg)
            else:
                # Si ya es un objeto de mensaje correctamente formateado
                print("   üì§ Enviando mensaje...")
                server.send_message(msg)

            server.quit()
            print("   ‚úÖ Correo enviado exitosamente")
            return True

        except smtplib.SMTPAuthenticationError as e:
            print(f"‚ùå Error de autenticaci√≥n (intento {attempt+1}/{max_attempts}): {str(e)}")
            print("   üí° Verifica:")
            print("      - Email: credito@findii.co")
            print("      - Contrase√±a de aplicaci√≥n (no la contrase√±a normal)")
            print("      - 2FA habilitado en Zoho")
            if attempt < max_attempts - 1:
                print(f"   ‚è≥ Reintentando en {retry_delay} segundos...")
                std_time.sleep(retry_delay)
            else:
                return False

        except smtplib.SMTPConnectError as e:
            print(f"‚ùå Error de conexi√≥n (intento {attempt+1}/{max_attempts}): {str(e)}")
            print("   üí° Verifica:")
            print("      - Conexi√≥n a internet")
            print("      - Servidor SMTP: smtp.zoho.com")
            print("      - Puerto: 465")
            if attempt < max_attempts - 1:
                print(f"   ‚è≥ Reintentando en {retry_delay} segundos...")
                std_time.sleep(retry_delay)
            else:
                return False

        except Exception as e:
            print(f"‚ùå Error general (intento {attempt+1}/{max_attempts}): {str(e)}")
            print(f"   üîç Tipo de error: {type(e).__name__}")
            print(f"   üìß Tipo de msg: {type(msg)}")

            if attempt < max_attempts - 1:
                print(f"   ‚è≥ Reintentando en {retry_delay} segundos...")
                std_time.sleep(retry_delay)
            else:
                print("   ‚ùå Se agotaron los intentos para enviar el correo")
                return False

def enviar_email_solicitante(email_settings, data):
    """
    Env√≠a email de confirmaci√≥n al solicitante
    """
    try:
        msg = MIMEMultipart()
        msg['From'] = email_settings["sender_email"]
        msg['To'] = data['solicitante']['correo_electronico']
        msg['Subject'] = "‚úÖ Tu solicitud de cr√©dito ha sido registrada con √©xito"

        # Extraer informaci√≥n para el email
        solicitante = data['solicitante']
        solicitud = data['solicitud']
        detalle_credito = solicitud.get('detalle_credito', {})

        # Obtener datos espec√≠ficos del cr√©dito
        tipo_credito = detalle_credito.get('tipo_credito', 'N/A')
        valor_vehiculo = detalle_credito.get('credito_vehicular', {}).get('valor_vehiculo', 'N/A') if 'credito_vehicular' in detalle_credito else 'N/A'
        monto_solicitado = detalle_credito.get('credito_vehicular', {}).get('monto_solicitado', 'N/A') if 'credito_vehicular' in detalle_credito else 'N/A'
        plazo = detalle_credito.get('credito_vehicular', {}).get('plazo_meses', 'N/A') if 'credito_vehicular' in detalle_credito else 'N/A'
        cuota_inicial = detalle_credito.get('credito_vehicular', {}).get('cuota_inicial', 'N/A') if 'credito_vehicular' in detalle_credito else 'N/A'

        # Obtener informaci√≥n adicional del solicitante
        info_extra = solicitante.get('info_extra', {})
        celular = info_extra.get('celular', 'N/A')
        profesion = info_extra.get('profesion', 'N/A')

        # Obtener fecha y hora actual
        fecha_hora_envio = datetime.now().strftime("%d/%m/%Y a las %H:%M:%S")
        
        # Cuerpo del mensaje para el solicitante
        body = f"""Hola {solicitante['nombre_completo']},

¬°Gracias por confiar en Findii! üöÄ Hemos recibido tu solicitud de cr√©dito y ya est√° en proceso de validaci√≥n.

üìÖ Fecha y hora de env√≠o: {fecha_hora_envio}

Puedes hacer seguimiento en cualquier momento a trav√©s del siguiente enlace:
üëâ https://findii.co/seguimiento/{data['id_radicado']}.


Aqu√≠ tienes un resumen de tu informaci√≥n registrada:

üìå Datos del solicitante

Nombre: {solicitante['nombre_completo']}

Documento: {solicitante['datos_basicos']['tipo_identificacion']} {solicitante['datos_basicos']['numero_documento']}

Email: {solicitante['correo_electronico']}

Celular: {celular}

Profesi√≥n: {profesion}

üìå Detalles del cr√©dito

Banco seleccionado: {solicitud['banco_nombre']}

Tipo de cr√©dito: {tipo_credito}

Valor del veh√≠culo: ${valor_vehiculo}

Monto solicitado: ${monto_solicitado}

Plazo: {plazo} meses

Cuota inicial: ${cuota_inicial}

Estado actual: {solicitud['estado']}

üëâ Muy pronto uno de nuestros asesores se pondr√° en contacto contigo para guiarte en el proceso y resolver cualquier inquietud.

Si tienes dudas, puedes responder directamente a este correo o escribirnos en nuestra p√°gina web findii.co
Gracias por elegirnos,
El equipo Findii ‚ú®"""

        msg.attach(MIMEText(body, 'plain'))
        return send_email(email_settings, msg)

    except Exception as e:
        print(f"Error enviando email al solicitante: {str(e)}")
        return False

def enviar_email_asesor(email_settings, data):
    """
    Env√≠a email de notificaci√≥n al asesor
    """
    try:
        msg = MIMEMultipart()
        msg['From'] = email_settings["sender_email"]
        # Enviar tanto al asesor como a comercial@findii.co
        destinatarios = [data['asesor']['correo'], 'comercial@findii.co']
        msg['To'] = ', '.join(destinatarios)
        msg['Subject'] = f"Nueva solicitud asignada a tu gesti√≥n ‚Äì Cliente: {data['solicitante']['nombre_completo']}"

        # Extraer informaci√≥n para el email
        solicitante = data['solicitante']
        solicitud = data['solicitud']
        detalle_credito = solicitud.get('detalle_credito', {})
        info_extra = solicitante.get('info_extra', {})

        # Obtener datos espec√≠ficos del cr√©dito
        tipo_credito = detalle_credito.get('tipo_credito', 'N/A')
        valor_vehiculo = detalle_credito.get('credito_vehicular', {}).get('valor_vehiculo', 'N/A') if 'credito_vehicular' in detalle_credito else 'N/A'
        monto_solicitado = detalle_credito.get('credito_vehicular', {}).get('monto_solicitado', 'N/A') if 'credito_vehicular' in detalle_credito else 'N/A'
        cuota_inicial = detalle_credito.get('credito_vehicular', {}).get('cuota_inicial', 'N/A') if 'credito_vehicular' in detalle_credito else 'N/A'
        plazo = detalle_credito.get('credito_vehicular', {}).get('plazo_meses', 'N/A') if 'credito_vehicular' in detalle_credito else 'N/A'

        # Informaci√≥n adicional del solicitante
        celular = info_extra.get('celular', 'N/A')
        profesion = info_extra.get('profesion', 'N/A')
        estado_civil = info_extra.get('estado_civil', 'N/A')

        # Obtener fecha y hora actual
        fecha_hora_envio = datetime.now().strftime("%d/%m/%Y a las %H:%M:%S")
        
        # Cuerpo del mensaje para el asesor
        body = f"""Hola {data['asesor']['nombre']},

Se ha registrado una nueva solicitud de cr√©dito en Findii y est√° asignada a tu gesti√≥n. üéØ

üìÖ Fecha y hora de env√≠o: {fecha_hora_envio}

A continuaci√≥n, encontrar√°s el resumen de la informaci√≥n para dar inicio al proceso:

üìå Datos del cliente

Nombre: {solicitante['nombre_completo']}

Documento: {solicitante['datos_basicos']['tipo_identificacion']} {solicitante['datos_basicos']['numero_documento']}

Tel√©fono: {celular}

Email: {solicitante['correo_electronico']}

Profesi√≥n: {profesion}

Estado civil: {estado_civil}

üìå Detalles de la solicitud

Banco destino: {solicitud['banco_nombre']}

Ciudad: {solicitud['ciudad_solicitud']}

Tipo de cr√©dito: {tipo_credito}

Valor del veh√≠culo: ${valor_vehiculo}

Monto solicitado: ${monto_solicitado}

Cuota inicial: ${cuota_inicial}

Plazo: {plazo} meses

Estado: {solicitud['estado']}

üëâ Para continuar con la gesti√≥n, accede al portal de asesores aqu√≠:
Ingresar al portal de gesti√≥n

Recuerda que tu acompa√±amiento es clave para agilizar la aprobaci√≥n del cr√©dito y garantizar una excelente experiencia al cliente.

¬°√âxitos en este proceso! üöÄ

Equipo Findii"""

        msg.attach(MIMEText(body, 'plain'))
        return send_email(email_settings, msg)

    except Exception as e:
        print(f"Error enviando email al asesor: {str(e)}")
        return False

def enviar_email_banco(email_settings, data):
    """
    Env√≠a email de notificaci√≥n al banco con toda la informaci√≥n completa del solicitante
    """
    try:
        msg = MIMEMultipart()
        msg['From'] = email_settings["sender_email"]
        msg['To'] = data['banco']['correo_usuario']
        msg['Subject'] = f"Nueva solicitud de cr√©dito - {data['solicitante']['nombre_completo']}"

        # Extraer informaci√≥n para el email
        solicitante = data['solicitante']
        solicitud = data['solicitud']
        detalle_credito = solicitud.get('detalle_credito', {})
        info_extra = solicitante.get('info_extra', {})
        ubicacion = solicitante.get('ubicacion', {})
        actividad_economica = solicitante.get('actividad_economica', {})
        informacion_financiera = solicitante.get('informacion_financiera', {})
        referencias = solicitante.get('referencias', [])

        print(f"üîç DEBUG EMAIL BANCO - Datos disponibles:")
        print(f"   - info_extra keys: {list(info_extra.keys())}")
        print(f"   - ubicacion keys: {list(ubicacion.keys())}")
        print(f"   - actividad_economica keys: {list(actividad_economica.keys())}")
        print(f"   - informacion_financiera keys: {list(informacion_financiera.keys())}")
        print(f"   - detalle_credito keys: {list(detalle_credito.keys())}")
        print(f"   - referencias count: {len(referencias)}")

        # EXTRAER DATOS DIRECTAMENTE COMO LO HACEN LOS OTROS EMAILS
        # Usar el mismo patr√≥n que los emails del solicitante y asesor
        datos_basicos = solicitante.get('datos_basicos', {})
        
        # Datos personales b√°sicos - acceso directo
        nombre_completo = solicitante.get('nombre_completo', 'No especificado')
        nombres = solicitante.get('nombres', 'No especificado')
        primer_apellido = solicitante.get('primer_apellido', '')
        segundo_apellido = solicitante.get('segundo_apellido', '')
        apellidos = f"{primer_apellido} {segundo_apellido}".strip() or 'No especificado'
        
        tipo_doc = datos_basicos.get('tipo_identificacion', 'No especificado')
        numero_doc = datos_basicos.get('numero_documento', 'No especificado')
        fecha_nacimiento = datos_basicos.get('fecha_nacimiento', 'No especificado')
        genero_texto = "Masculino" if datos_basicos.get('genero', 'M') == 'M' else "Femenino"
        correo_electronico = solicitante.get('correo_electronico', solicitante.get('correo', 'No especificado'))

        # Informaci√≥n adicional del solicitante - acceso directo a info_extra
        celular = info_extra.get('celular', 'No especificado')
        telefono = info_extra.get('telefono', celular)
        profesion = info_extra.get('profesion', 'No especificado')
        nivel_estudios = info_extra.get('nivel_estudio', info_extra.get('nivel_estudios', 'No especificado'))
        estado_civil = info_extra.get('estado_civil', 'No especificado')
        nacionalidad = info_extra.get('nacionalidad', 'No especificado')
        lugar_nacimiento = info_extra.get('lugar_nacimiento', 'No especificado')
        fecha_expedicion = info_extra.get('fecha_expedicion', 'No especificado')
        personas_a_cargo = info_extra.get('personas_a_cargo', '0')

        # Informaci√≥n de ubicaci√≥n - acceso directo
        detalle_direccion = ubicacion.get('detalle_direccion', {})
        direccion_residencia = detalle_direccion.get('direccion_residencia', detalle_direccion.get('direccion', 'No especificado'))
        tipo_vivienda = detalle_direccion.get('tipo_vivienda', 'No especificado')
        barrio = detalle_direccion.get('barrio', 'No especificado')
        departamento_residencia = ubicacion.get('departamento_residencia', ubicacion.get('departamento', 'No especificado'))
        ciudad_residencia = ubicacion.get('ciudad_residencia', ubicacion.get('ciudad', 'No especificado'))
        correspondencia = detalle_direccion.get('recibir_correspondencia', 'No especificado')

        # Informaci√≥n de actividad econ√≥mica - acceso directo
        detalle_actividad = actividad_economica.get('detalle_actividad', {})
        tipo_actividad = detalle_actividad.get('tipo_actividad_economica', detalle_actividad.get('tipo_actividad', 'No especificado'))
        empresa = detalle_actividad.get('empresa', 'No especificado')
        cargo = detalle_actividad.get('cargo', 'No especificado')
        salario_base = detalle_actividad.get('salario_base', '0')

        # Informaci√≥n financiera - acceso directo
        detalle_financiera = informacion_financiera.get('detalle_financiera', {})
        ingreso_basico = detalle_financiera.get('ingreso_basico_mensual', '0')
        ingreso_variable = detalle_financiera.get('ingreso_variable_mensual', '0')
        otros_ingresos = detalle_financiera.get('otros_ingresos_mensuales', '0')
        gastos_financieros = detalle_financiera.get('gastos_financieros_mensuales', '0')
        gastos_personales = detalle_financiera.get('gastos_personales_mensuales', '0')
        total_activos = informacion_financiera.get('total_activos', '0')
        total_pasivos = informacion_financiera.get('total_pasivos', '0')
        declara_renta = detalle_financiera.get('declara_renta', 'No especificado')

        # Informaci√≥n del cr√©dito - acceso directo
        tipo_credito = detalle_credito.get('tipo_credito', 'N/A')
        credito_vehicular = detalle_credito.get('credito_vehicular', {})
        if credito_vehicular:
            valor_vehiculo = credito_vehicular.get('valor_vehiculo', 'N/A')
            cuota_inicial = credito_vehicular.get('cuota_inicial', 'N/A')
            plazo_meses = credito_vehicular.get('plazo_meses', 'N/A')
            monto_solicitado = credito_vehicular.get('monto_solicitado', 'N/A')
            estado_vehiculo = credito_vehicular.get('estado_vehiculo', 'N/A')
            tipo_credito_especifico = credito_vehicular.get('tipo_credito', tipo_credito)
        else:
            valor_vehiculo = cuota_inicial = plazo_meses = monto_solicitado = estado_vehiculo = tipo_credito_especifico = 'N/A'

        # Referencias - acceso directo y simplificado
        ref_personal_nombre = 'No especificado'
        ref_personal_telefono = 'No especificado'
        ref_personal_ciudad = 'No especificado'
        ref_personal_relacion = 'No especificado'

        # Buscar referencias en la lista
        for ref in referencias:
            tipo_ref = ref.get('tipo_referencia', '').lower()
            detalle_ref = ref.get('detalle_referencia', ref)
            
            if 'personal' in tipo_ref:
                ref_personal_nombre = detalle_ref.get('nombre_referencia', detalle_ref.get('nombre_completo', detalle_ref.get('nombre', 'No especificado')))
                ref_personal_telefono = detalle_ref.get('celular_referencia', detalle_ref.get('telefono', detalle_ref.get('celular', 'No especificado')))
                ref_personal_ciudad = detalle_ref.get('ciudad_referencia', 'No especificado')
                ref_personal_relacion = detalle_ref.get('relacion_referencia', detalle_ref.get('parentesco', detalle_ref.get('relacion', 'No especificado')))
                break

        # Formatear valores monetarios con separadores de miles
        def formatear_dinero(valor):
            if not valor or valor in ['N/A', 'No especificado', '', 'None', '0']:
                return 'No reportado'
            try:
                # Convertir a entero si es string num√©rico
                if isinstance(valor, str):
                    # Limpiar el valor de caracteres no num√©ricos excepto puntos y comas
                    valor_limpio = valor.replace('$', '').replace('.', '').replace(',', '').strip()
                    if valor_limpio.isdigit():
                        valor = int(valor_limpio)
                    else:
                        return 'No reportado'
                elif isinstance(valor, (int, float)):
                    valor = int(valor)
                else:
                    return 'No reportado'

                # Si el valor es 0, mostrar como no reportado
                if valor == 0:
                    return 'No reportado'

                # Formatear con separadores de miles
                return f"${valor:,}".replace(',', '.')
            except:
                return 'No reportado'

        # Debug para verificar datos extra√≠dos
        print(f"üîç DEBUG DATOS EXTRA√çDOS PARA BANCO:")
        print(f"   - nombres: '{nombres}' | apellidos: '{apellidos}'")
        print(f"   - tipo_doc: '{tipo_doc}' | numero_doc: '{numero_doc}'")
        print(f"   - celular: '{celular}' | profesion: '{profesion}'")
        print(f"   - empresa: '{empresa}' | cargo: '{cargo}'")
        print(f"   - direccion: '{direccion_residencia}' | ciudad: '{ciudad_residencia}'")

        # Obtener fecha y hora actual
        fecha_hora_envio = datetime.now().strftime("%d/%m/%Y a las %H:%M:%S")
        
        # Cuerpo del mensaje mejorado para el banco
        body = f"""Buenos d√≠as,

En Findii valoramos nuestra alianza y seguimos trabajando para que m√°s clientes accedan a soluciones de financiamiento r√°pidas y efectivas. üöÄ

üìÖ Fecha y hora de env√≠o: {fecha_hora_envio}

Agradecemos su colaboraci√≥n con la siguiente consulta para {solicitud['banco_nombre']}, relacionada con la radicaci√≥n de un {tipo_credito_especifico.lower()}. Adjuntamos la documentaci√≥n correspondiente para su revisi√≥n.

üìã DATOS DEL SOLICITANTE
Nombres: {nombres}
Apellidos: {apellidos}
Tipo de identificaci√≥n: {tipo_doc}
N√∫mero de documento: {numero_doc}
Fecha de expedici√≥n: {fecha_expedicion}
Fecha de nacimiento: {fecha_nacimiento}
Lugar de nacimiento: {lugar_nacimiento}
Nacionalidad: {nacionalidad}
G√©nero: {genero_texto}
Correo: {correo_electronico}
Tel√©fono / Celular: {celular}
Estado civil: {estado_civil}
Personas a cargo: {personas_a_cargo}
Nivel de estudios: {nivel_estudios}
Profesi√≥n: {profesion}

üìç UBICACI√ìN
Departamento de residencia: {departamento_residencia}
Ciudad de residencia: {ciudad_residencia}
Direcci√≥n: {direccion_residencia}
Tipo de vivienda: {tipo_vivienda}
Correspondencia: {correspondencia}

üíº ACTIVIDAD ECON√ìMICA
Tipo de actividad econ√≥mica: {tipo_actividad}
Empresa: {empresa}
Cargo: {cargo}
Salario base: {formatear_dinero(salario_base)}

üí∞ INFORMACI√ìN FINANCIERA
Total ingresos mensuales: {formatear_dinero(informacion_financiera.get('total_ingresos_mensuales', '0'))}
Total egresos mensuales: {formatear_dinero(informacion_financiera.get('total_egresos_mensuales', '0'))}
Total activos: {formatear_dinero(total_activos)}
Total pasivos: {formatear_dinero(total_pasivos)}
Detalle:
  Ingreso b√°sico: {formatear_dinero(ingreso_basico)}
  Ingreso variable: {formatear_dinero(ingreso_variable)}
  Otros ingresos: {formatear_dinero(otros_ingresos)}
  Gastos financieros: {formatear_dinero(gastos_financieros)}
  Gastos personales: {formatear_dinero(gastos_personales)}
  Declara renta: {declara_renta}

üöó DETALLES DEL CR√âDITO
Banco: {solicitud['banco_nombre']}
Ciudad de solicitud: {solicitud['ciudad_solicitud']}
Estado de la solicitud: {solicitud['estado']}
Tipo de cr√©dito: {tipo_credito}
Modalidad: {tipo_credito_especifico}
Estado del veh√≠culo: {estado_vehiculo}
Valor del veh√≠culo: {formatear_dinero(valor_vehiculo)}
Monto solicitado: {formatear_dinero(monto_solicitado)}
Cuota inicial: {formatear_dinero(cuota_inicial)}
Plazo: {plazo_meses} meses

üë• REFERENCIAS
Personal:
  Nombre: {ref_personal_nombre}
  Celular: {ref_personal_telefono}
  Ciudad: {ref_personal_ciudad}
  Relaci√≥n: {ref_personal_relacion}

Quedamos atentos a su confirmaci√≥n y a cualquier informaci√≥n adicional que requieran para agilizar el proceso.

Gracias por su apoyo y gesti√≥n. üòä

Este mensaje se ha enviado autom√°ticamente a trav√©s de nuestro portal de asesores. Para dar respuesta a la solicitud, utilice el portal web o el siguiente enlace:
üîó https://findii.co/seguimiento/{data['id_radicado']}

Responsable: {data['asesor']['nombre']}
Correo del responsable: {data['asesor']['correo']}"""

        msg.attach(MIMEText(body, 'plain'))
        return send_email(email_settings, msg)

    except Exception as e:
        print(f"Error enviando email al banco: {str(e)}")
        return False
